From c700374ad03fc08395302d070521ee50455c21be Mon Sep 17 00:00:00 2001
From: Xarblu <xarblu@protonmail.com>
Date: Tue, 14 Oct 2025 21:14:46 +0200
Subject: [PATCH 2/7] bcachefs: bio_init changes for 6.18

---
 fs/bcachefs/btree/read.c   | 5 +++++
 fs/bcachefs/data/update.c  | 6 ++++++
 fs/bcachefs/journal/init.c | 6 ++++++
 fs/bcachefs/journal/read.c | 5 +++++
 fs/bcachefs/sb/io.c        | 5 +++++
 5 files changed, 27 insertions(+)

diff --git a/fs/bcachefs/btree/read.c b/fs/bcachefs/btree/read.c
index 617445816384..fabd466a1590 100644
--- a/fs/bcachefs/btree/read.c
+++ b/fs/bcachefs/btree/read.c
@@ -30,6 +30,7 @@
 
 #include <linux/moduleparam.h>
 #include <linux/sched/mm.h>
+#include <linux/version.h>
 
 static __maybe_unused unsigned bch2_btree_read_corrupt_ratio;
 static __maybe_unused int bch2_btree_read_corrupt_device;
@@ -1368,7 +1369,11 @@ int bch2_btree_node_scrub(struct btree_trans *trans,
 
 	INIT_WORK(&scrub->work, btree_node_scrub_work);
 
+# if LINUX_VERSION_CODE < KERNEL_VERSION(6,18,0)
 	bio_init(&scrub->bio, ca->disk_sb.bdev, scrub->bio.bi_inline_vecs, vecs, REQ_OP_READ);
+# else
+	bio_init_inline(&scrub->bio, ca->disk_sb.bdev, vecs, REQ_OP_READ);
+# endif
 	bch2_bio_map(&scrub->bio, scrub->buf, c->opts.btree_node_size);
 	scrub->bio.bi_iter.bi_sector	= pick.ptr.offset;
 	scrub->bio.bi_end_io		= btree_node_scrub_endio;
diff --git a/fs/bcachefs/data/update.c b/fs/bcachefs/data/update.c
index 16f2cb55c21f..415d9d925824 100644
--- a/fs/bcachefs/data/update.c
+++ b/fs/bcachefs/data/update.c
@@ -28,6 +28,7 @@
 #include "snapshots/subvolume.h"
 
 #include <linux/ioprio.h>
+#include <linux/version.h>
 
 static const char * const bch2_data_update_type_strs[] = {
 #define x(t, n, ...) [n] = #t,
@@ -710,8 +711,13 @@ static int __bch2_data_update_bios_init(struct data_update *m, struct bch_fs *c,
 	if (!m->bvecs)
 		return -ENOMEM;
 
+# if LINUX_VERSION_CODE < KERNEL_VERSION(6,18,0)
 	bio_init(&m->rbio.bio,		NULL, m->bvecs, nr_vecs, REQ_OP_READ);
 	bio_init(&m->op.wbio.bio,	NULL, m->bvecs, nr_vecs, 0);
+# else
+	bio_init_inline(&m->rbio.bio,		NULL, nr_vecs, REQ_OP_READ);
+	bio_init_inline(&m->op.wbio.bio,	NULL, nr_vecs, 0);
+# endif
 
 	if (bch2_bio_alloc_pages(&m->op.wbio.bio, buf_bytes, GFP_KERNEL)) {
 		kfree(m->bvecs);
diff --git a/fs/bcachefs/journal/init.c b/fs/bcachefs/journal/init.c
index fb73ee000d95..f809459ec8e6 100644
--- a/fs/bcachefs/journal/init.c
+++ b/fs/bcachefs/journal/init.c
@@ -11,6 +11,8 @@
 #include "alloc/foreground.h"
 #include "btree/update.h"
 
+#include <linux/version.h>
+
 /* allocate journal on a device: */
 
 static int bch2_set_nr_journal_buckets_iter(struct bch_dev *ca, unsigned nr,
@@ -540,7 +542,11 @@ int bch2_dev_journal_init(struct bch_dev *ca, struct bch_sb *sb)
 
 		ja->bio[i]->ca = ca;
 		ja->bio[i]->buf_idx = i;
+# if LINUX_VERSION_CODE < KERNEL_VERSION(6,18,0)
 		bio_init(&ja->bio[i]->bio, NULL, ja->bio[i]->bio.bi_inline_vecs, nr_bvecs, 0);
+# else
+		bio_init_inline(&ja->bio[i]->bio, NULL, nr_bvecs, 0);
+# endif
 	}
 
 	ja->buckets = kcalloc(ja->nr, sizeof(u64), GFP_KERNEL);
diff --git a/fs/bcachefs/journal/read.c b/fs/bcachefs/journal/read.c
index bdb91ba483f7..7ecbc837de6e 100644
--- a/fs/bcachefs/journal/read.c
+++ b/fs/bcachefs/journal/read.c
@@ -19,6 +19,7 @@
 
 #include <linux/string_choices.h>
 #include <linux/sched/sysctl.h>
+#include <linux/version.h>
 
 void bch2_journal_pos_from_member_info_set(struct bch_fs *c)
 {
@@ -1080,7 +1081,11 @@ static int journal_read_bucket(struct bch_dev *ca,
 			bio = bio_kmalloc(nr_bvecs, GFP_KERNEL);
 			if (!bio)
 				return bch_err_throw(c, ENOMEM_journal_read_bucket);
+# if LINUX_VERSION_CODE < KERNEL_VERSION(6,18,0)
 			bio_init(bio, ca->disk_sb.bdev, bio->bi_inline_vecs, nr_bvecs, REQ_OP_READ);
+# else
+			bio_init_inline(bio, ca->disk_sb.bdev, nr_bvecs, REQ_OP_READ);
+# endif
 
 			bio->bi_iter.bi_sector = offset;
 			bch2_bio_map(bio, buf->data, sectors_read << 9);
diff --git a/fs/bcachefs/sb/io.c b/fs/bcachefs/sb/io.c
index 94a09d19e838..540e3df274eb 100644
--- a/fs/bcachefs/sb/io.c
+++ b/fs/bcachefs/sb/io.c
@@ -30,6 +30,7 @@
 #include <linux/backing-dev.h>
 #include <linux/sort.h>
 #include <linux/string_choices.h>
+#include <linux/version.h>
 
 struct bch2_metadata_version {
 	u16		version;
@@ -235,7 +236,11 @@ int bch2_sb_realloc(struct bch_sb_handle *sb, unsigned u64s)
 		if (!bio)
 			return -BCH_ERR_ENOMEM_sb_bio_realloc;
 
+# if LINUX_VERSION_CODE < KERNEL_VERSION(6,18,0)
 		bio_init(bio, NULL, bio->bi_inline_vecs, nr_bvecs, 0);
+# else
+		bio_init_inline(bio, NULL, nr_bvecs, 0);
+# endif
 
 		kfree(sb->bio);
 		sb->bio = bio;
-- 
2.51.0

